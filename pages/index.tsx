import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Slider from "@mui/material/Slider";
import React, { useEffect } from "react";
import { useState } from "react";
import ClipLoader from "react-spinners/ClipLoader";
import Dropdown from "react-dropdown";
import "react-dropdown/style.css";
import AudioPlayer from "react-h5-audio-player";
import "react-h5-audio-player/lib/styles.css";


const sliderMarks = [
	{
		value: 0,
		label: "Opus"
	},
	{
		value: 1,
		label: "PIXL (+Codec2)"
	},
	{
		value: 2,
		label: "Reference (Uncompressed)"
	},
	{
		value: 3,
		label: "AAC*"
	},
	
];

//const Home: NextPage = function({i}){

const realNames = {};

let currentCodec = 1;
let currentAF = "";
function Home(){
	let [loading, setLoading] = useState(false);
	let [audioFiles, setAudioFiles] = useState([]);
	let [playerLink, setPlayerLink] = useState("");


	let timeoutWaiter: NodeJS.Timeout | null = null;

	useEffect(() => {
		loadFiles();
	}, []);

	function loadFiles(){
		setLoading(true);
		fetch("/api/list").then(res => res.json()).then(res => {
			setLoading(false);
			if(res.err){
				console.log("err");
			}
			else{
				console.log(res);
				
				const clean = [];
				for(const song of res.songs){
					let c = (song
						.replace(".wav", "")
						.replace("_", " by ")
						.replace(/([A-Z])/g, " $1")
						.replace(/%./, (s) => s.toUpperCase)
					);

					clean.push(c);
					realNames[c] = song;
				}


				setAudioFiles(clean);
			}
		});
		setLoading(false);

	}


	function loadAudioFile(){
		const codecDec = ["opus", "pixlopus", "ref", "aac"];
		//setPlayerLink(`/songs/${currentAF}/${codecDec[currentCodec]}.wav`);
		setPlayerLink(`https://storage.cloud.google.com/pixl-audiosamples/${currentAF}/${codecDec[currentCodec]}.wav`);
		console.log(`https://storage.cloud.google.com/pixl-audiosamples/${currentAF}/${codecDec[currentCodec]}.wav`);
	}

	function handleSliderChange(e){
		currentCodec = e.target.value;
		loadAudioFile();
		return;

		const sliderValue = e.target.value;
		console.log(sliderValue);
		if(timeoutWaiter != null){
			return;
		}
		timeoutWaiter = setTimeout(() => {
			if(e.target.value == sliderValue){
				timeoutWaiter = null;
				currentCodec = e.target.value;
				loadAudioFile();
			}
		}, 1000);
	}

	return (
		<div className={styles.container}>
			<Head>
				<title>PIXL Demo</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className={styles.main}>
				<h1 className={styles.title}>
					Compare Popular Codecs To PIXL!
				</h1>

				<h2>
					(Streaming At 4kbps)
				</h2>

				<Slider
					defaultValue={1}	
					step={1}
					marks={sliderMarks}
					max={3}
					onChange={handleSliderChange}
					className={styles.slider}
				/>
				<br />
				<br />

				<Dropdown
					options={audioFiles}
					onChange={(e) => {
						currentAF = realNames[e.value];
						console.log(e.value);
						loadAudioFile();	
					}}
					className={styles.dropdown}
				/>

				<br />
				<br />

				<AudioPlayer
					autoPlay
					src={playerLink}
					onPlay={e => console.log("onPlay")}
					// other props here
				/>


				<ClipLoader loading={loading}/>

			</main>

			<footer className={styles.footer}>
				AAC only supports as low as 6kbps, so 6kbps compression was used
			</footer>
		</div>
	);
};

/*let num = 0;
Home.getInitialProps = async (ctx) => {
	return {i: num++};
};*/

export default Home;
